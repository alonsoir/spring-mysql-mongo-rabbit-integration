<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.krams.tutorials</groupId>
	<artifactId>spring-mysql-mongo-rabbit</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>spring-mysql-mongo-rabbit Maven Webapp</name>
	<url>http://maven.apache.org</url>

	<!-- Versions -->
	<properties>
		<spring.version>3.2.8.RELEASE</spring.version>
		<spring.data.jpa.version>1.5.0.RELEASE</spring.data.jpa.version>
		<spring.data.mongo.version>1.2.0.RELEASE</spring.data.mongo.version>
		<spring.rmqp.version>1.0.0.RELEASE</spring.rmqp.version>
		<spring-orm.version>4.0.2.RELEASE</spring-orm.version>
		<slf4j-version>1.6.1</slf4j-version>
		<log4j.version>1.2.14</log4j.version>
		<org.cloudfoundry-version>0.8.0</org.cloudfoundry-version>
		<ehcache-core.version>2.5.1</ehcache-core.version>
		<hibernate-entitymanager.version>4.3.4.Final</hibernate-entitymanager.version>
		<validation-api.version>1.1.0.Final</validation-api.version>
		<hibernate-validator.version>5.1.0.Final</hibernate-validator.version>
		<mysql-connector-java.version>5.1.19</mysql-connector-java.version>
		<mongo-java-driver.version>2.7.2</mongo-java-driver.version>
		<aspectjrt.version>1.6.10</aspectjrt.version>
		<cglib-nodep.version>2.2</cglib-nodep.version>
		<joda-time.version>1.6.2</joda-time.version>
		<servlet-api.version>2.5</servlet-api.version>
		<jstl.version>1.1.2</jstl.version>
		<standard.version>1.1.2</standard.version>
		<jsp-api.version>2.0</jsp-api.version>
		<jackson-mapper-asl.version>1.8.0</jackson-mapper-asl.version>
		<jackson-core-asl.version>1.8.0</jackson-core-asl.version>
		<hibernate-jpamodelgen.version>1.3.0.Final</hibernate-jpamodelgen.version>
		<maven-compiler-plugin.version>2.3.2</maven-compiler-plugin.version>
		<maven-resources-plugin.version>2.5</maven-resources-plugin.version>
	</properties>

	<dependencies>
		
		<!-- Spring Core -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${spring-orm.version}</version>
		</dependency>

		<!-- A seamless aspect-oriented extension to the Java programming language -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${aspectjrt.version}</version>
		</dependency>

		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>${aspectjrt.version}</version>
		</dependency>

		<!-- Cglib is a powerful, high performance and quality Code Generation 
			Library, It is used to extend JAVA classes and implements interfaces at runtime. -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib-nodep</artifactId>
			<version>${cglib-nodep.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- Database pooling <dependency> <groupId>c3p0</groupId> <artifactId>c3p0</artifactId> 
			<version>0.9.1.2</version> <type>jar</type> <scope>compile</scope> </dependency> -->
		<!-- Joda Time -->
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>${joda-time.version}</version>
		</dependency>

		<!-- Logger -->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>${log4j.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- The Simple Logging Facade for Java or (SLF4J) serves as a simple facade 
			or abstraction for various logging frameworks, e.g. java.util.logging, log4j 
			and logback, allowing the end user to plug in the desired logging framework 
			at deployment time. -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j-version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j-version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${slf4j-version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- Javax Servlet. This needs to be included for runtime only! -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>${servlet-api.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- The JavaServer Pages Standard Tag Library (JSTL) encapsulates, as 
			simple tags, core functionality common to many JSP applications. -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>${jstl.version}</version>
		</dependency>
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>${standard.version}</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jsp-api</artifactId>
			<version>${jsp-api.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- Data Mapper package is a high-performance data binding package built 
			on Jackson JSON processor -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>${jackson-mapper-asl.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- Jackson is a high-performance JSON processor (parser, generator) -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>${jackson-core-asl.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>${hibernate-entitymanager.version}</version>
			<scope>compile</scope>
		</dependency>

		<!-- Hibernate Validator -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>${hibernate-validator.version}</version>
		</dependency>
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<version>${validation-api.version}</version>
		</dependency>

		<!-- MySQL Connector -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql-connector-java.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- MongoDB Java Driver -->
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<version>${mongo-java-driver.version}</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- Spring Data JPA -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-jpa</artifactId>
			<version>${spring.data.jpa.version}</version>
		</dependency>

		<!-- Spring Data MongoDB -->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-mongodb</artifactId>
			<version>${spring.data.mongo.version}</version>
		</dependency>

		<!-- Spring RabbitMQ -->
		<dependency>
			<groupId>org.springframework.amqp</groupId>
			<artifactId>spring-rabbit</artifactId>
			<version>${spring.rmqp.version}</version>
		</dependency>

		<!-- Ehcache -->
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache-core</artifactId>
			<version>${ehcache-core.version}</version>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<version>${hibernate-jpamodelgen.version}</version>
			<optional>true</optional>
		</dependency>
	</dependencies>

	<build>
		<finalName>spring-mysql-mongo-rabbit</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${maven-compiler-plugin.version}</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
					<compilerArguments>
						<processor>org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor</processor>
					</compilerArguments>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>tomcat-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
			</plugin>

			<!-- The Resources Plugin handles the copying of project resources to 
				the output directory. @see http://maven.apache.org/plugins/maven-resources-plugin/index.html -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>${maven-resources-plugin.version}</version>
				<executions>
					<execution>
						<id>copy-meta-inf</id>
						<phase>compile</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.outputDirectory}/META-INF</outputDirectory>
							<resources>
								<resource>
									<directory>${project.basedir}/src/main/java/META-INF</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<repositories>

		<!-- For main Spring releases -->
		<repository>
			<id>org.springframework.maven.release</id>
			<name>Spring Maven Release Repository</name>
			<url>http://maven.springframework.org/release</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>

		<!-- For testing against latest Spring snapshots -->
		<repository>
			<id>org.springframework.maven.snapshot</id>
			<name>Spring Maven Snapshot Repository</name>
			<url>http://maven.springframework.org/snapshot</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>

		<!-- For developing against latest Spring milestones -->
		<repository>
			<id>org.springframework.maven.milestone</id>
			<name>Spring Maven Milestone Repository</name>
			<url>http://maven.springframework.org/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>

		<repository>
			<id>jboss</id>
			<name>JBoss repository</name>
			<url>https://repository.jboss.org/nexus/content/repositories/releases</url>
		</repository>

	</repositories>
</project>
